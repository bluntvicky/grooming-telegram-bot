const Service = require('../models/service');
const TimeSlot = require('../models/timeSlot');
const Appointment = require('../models/appointment');
const Review = require('../models/review');
const { mainMenu } = require('../utils/keyboards');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
const setupCallbacks = (bot) => {
  // –û–±—â–∏–µ –∫–æ–ª–±—ç–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  bot.action('back_to_main', async (ctx) => {
    try {
      await ctx.deleteMessage();
    } catch (err) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', err);
    }
    
    await ctx.reply('üìú –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainMenu());
    await ctx.answerCbQuery();
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
  bot.action(/^date_(.+)$/, async (ctx) => {
    const dateValue = ctx.match[1]; // YYYY-MM-DD
    ctx.session.selectedDate = dateValue;
    
    try {
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Å—Ü–µ–Ω—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
      ctx.scene.enter('time-slots-scene', { date: dateValue });
      await ctx.answerCbQuery();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã:', err);
      await ctx.reply('üòû –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
  bot.action(/^slot_(.+)$/, async (ctx) => {
    const slotId = ctx.match[1];
    
    try {
      const slot = await TimeSlot.findById(slotId);
      
      if (!slot) {
        await ctx.answerCbQuery('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      if (slot.isBooked) {
        await ctx.answerCbQuery('–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.');
        return;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –≤ —Å–µ—Å—Å–∏–∏
      ctx.session.selectedTimeSlot = slotId;
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–∏—Å–∏, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
      if (ctx.session.appointmentStep === 'selecting_time') {
        ctx.scene.enter('appointment-services-scene');
      } else {
        // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        const date = new Date(slot.startTime);
        await ctx.answerCbQuery(`–í—ã –≤—ã–±—Ä–∞–ª–∏ ${date.toLocaleDateString('ru-RU')} –≤ ${date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏—é –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è
        await ctx.reply(
          `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ ${date.toLocaleDateString('ru-RU')} –≤ ${date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}\n\n` +
          '–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è?',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'book_selected_time' }],
                [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_dates' }]
              ]
            }
          }
        );
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏:', err);
      await ctx.reply('üòû –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
  bot.action(/^service_(.+)$/, async (ctx) => {
    const serviceId = ctx.match[1];
    
    try {
      const service = await Service.findById(serviceId);
      
      if (!service) {
        await ctx.answerCbQuery('–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
      if (!ctx.session.cart) {
        ctx.session.cart = { services: [] };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —É—Å–ª—É–≥–∞
      const serviceIndex = ctx.session.cart.services.findIndex(s => s.toString() === serviceId);
      
      if (serviceIndex === -1) {
        // –ï—Å–ª–∏ —É—Å–ª—É–≥–∞ –µ—â—ë –Ω–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
        ctx.session.cart.services.push(serviceId);
        await ctx.answerCbQuery(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${service.name}`);
      } else {
        // –ï—Å–ª–∏ —É—Å–ª—É–≥–∞ —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ, —É–¥–∞–ª—è–µ–º –µ—ë
        ctx.session.cart.services.splice(serviceIndex, 1);
        await ctx.answerCbQuery(`‚ùå –£–¥–∞–ª–µ–Ω–æ: ${service.name}`);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å —Ç–µ–∫—É—â–∏–º –≤—ã–±–æ—Ä–æ–º —É—Å–ª—É–≥
      const selectedServices = await Service.find({
        _id: { $in: ctx.session.cart.services }
      });
      
      let totalPrice = 0;
      let messageText = 'üõí *–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:*\n\n';
      
      if (selectedServices.length === 0) {
        messageText += '–í—ã –ø–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —É—Å–ª—É–≥–∏';
      } else {
        selectedServices.forEach(service => {
          messageText += `‚Ä¢ ${service.name} - ${service.price}‚ÇΩ\n`;
          totalPrice += service.price;
        });
        
        messageText += `\n*–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* ${totalPrice}‚ÇΩ`;
      }
      
      await ctx.editMessageText(messageText, {
        parse_mode: 'Markdown',
        reply_markup: ctx.callbackQuery.message.reply_markup
      });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Å–ª—É–≥–∏:', err);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Å–ª—É–≥–∏');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥
  bot.action('finish_service_selection', async (ctx) => {
    try {
      if (!ctx.session.cart || ctx.session.cart.services.length === 0) {
        await ctx.answerCbQuery('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —É—Å–ª—É–≥—É');
        return;
      }
      
      // –ï—Å–ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–∏—Å–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      if (ctx.session.appointmentStep === 'selecting_services') {
        ctx.scene.enter('appointment-contact-scene');
      } else {
        // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö
        const selectedServices = await Service.find({
          _id: { $in: ctx.session.cart.services }
        });
        
        let totalPrice = 0;
        let messageText = '‚úÖ *–í–∞—à –≤—ã–±–æ—Ä —É—Å–ª—É–≥:*\n\n';
        
        selectedServices.forEach(service => {
          messageText += `‚Ä¢ ${service.name} - ${service.price}‚ÇΩ\n`;
          totalPrice += service.price;
        });
        
        messageText += `\n*–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* ${totalPrice}‚ÇΩ\n\n`;
        messageText += '–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–∏ —É—Å–ª—É–≥–∏?';
        
        await ctx.editMessageText(messageText, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'book_selected_services' }],
              [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_services' }]
            ]
          }
        });
      }
      
      await ctx.answerCbQuery();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥:', err);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  bot.action(/^confirm_appointment_(.+)$/, async (ctx) => {
    if (!ctx.session.isAdmin) {
      await ctx.answerCbQuery('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
      return;
    }
    
    const appointmentId = ctx.match[1];
    
    try {
      const appointment = await Appointment.findById(appointmentId)
        .populate('services')
        .populate('timeSlot');
      
      if (!appointment) {
        await ctx.answerCbQuery('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
      appointment.status = 'confirmed';
      await appointment.save();
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
      try {
        await bot.telegram.sendMessage(
          appointment.user.telegramId,
          `‚úÖ *–í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n` +
          `–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${new Date(appointment.timeSlot.startTime).toLocaleDateString('ru-RU')} –≤ ${new Date(appointment.timeSlot.startTime).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}\n\n` +
          `–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–π—Ç–∏ –≤–æ–≤—Ä–µ–º—è. –ñ–¥—ë–º –≤–∞—Å –∏ –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`,
          { parse_mode: 'Markdown' }
        );
      } catch (notifyError) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞:', notifyError);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      await ctx.editMessageText(
        `‚úÖ *–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*\n\n` +
        `üë§ –ö–ª–∏–µ–Ω—Ç: ${appointment.user.name}\n` +
        `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${appointment.user.phone}\n` +
        `üêï –ü–æ—Ä–æ–¥–∞: ${appointment.petInfo.breed}\n` +
        `üìÖ –î–∞—Ç–∞: ${new Date(appointment.timeSlot.startTime).toLocaleDateString('ru-RU')}\n` +
        `üïí –í—Ä–µ–º—è: ${new Date(appointment.timeSlot.startTime).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`,
        { parse_mode: 'Markdown' }
      );
      
      await ctx.answerCbQuery('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', err);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏');
    }
  });

  bot.action(/^cancel_appointment_(.+)$/, async (ctx) => {
    if (!ctx.session.isAdmin) {
      await ctx.answerCbQuery('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
      return;
    }
    
    const appointmentId = ctx.match[1];
    
    try {
      const appointment = await Appointment.findById(appointmentId)
        .populate('timeSlot');
      
      if (!appointment) {
        await ctx.answerCbQuery('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
      appointment.status = 'cancelled';
      await appointment.save();
      
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
      if (appointment.timeSlot) {
        appointment.timeSlot.isBooked = false;
        appointment.timeSlot.appointmentId = null;
        await appointment.timeSlot.save();
      }
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ—Ç–º–µ–Ω–µ
      try {
        await bot.telegram.sendMessage(
          appointment.user.telegramId,
          `‚ùå *–í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n` +
          `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ ${new Date(appointment.timeSlot.startTime).toLocaleDateString('ru-RU')} –≤ ${new Date(appointment.timeSlot.startTime).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n` +
          `–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.`,
          { parse_mode: 'Markdown' }
        );
      } catch (notifyError) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞:', notifyError);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      await ctx.editMessageText(
        `‚ùå *–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n` +
        `üë§ –ö–ª–∏–µ–Ω—Ç: ${appointment.user.name}\n` +
        `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${appointment.user.phone}\n` +
        `üêï –ü–æ—Ä–æ–¥–∞: ${appointment.petInfo.breed}\n` +
        `üìÖ –î–∞—Ç–∞: ${new Date(appointment.timeSlot.startTime).toLocaleDateString('ru-RU')}\n` +
        `üïí –í—Ä–µ–º—è: ${new Date(appointment.timeSlot.startTime).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`,
        { parse_mode: 'Markdown' }
      );
      
      await ctx.answerCbQuery('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏:', err);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  bot.action(/^approve_review_(.+)$/, async (ctx) => {
    if (!ctx.session.isAdmin) {
      await ctx.answerCbQuery('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
      return;
    }
    
    const reviewId = ctx.match[1];
    
    try {
      const review = await Review.findById(reviewId);
      
      if (!review) {
        await ctx.answerCbQuery('–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      // –û–¥–æ–±—Ä—è–µ–º –æ—Ç–∑—ã–≤
      review.approved = true;
      await review.save();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.editMessageText(
        `‚úÖ *–û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω*\n\n` +
        `‚≠ê –û—Ü–µ–Ω–∫–∞: ${review.rating}/5\n` +
        `üë§ –ö–ª–∏–µ–Ω—Ç: ${review.user.name}\n` +
        `üìù –¢–µ–∫—Å—Ç: ${review.text}`,
        { parse_mode: 'Markdown' }
      );
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await bot.telegram.sendMessage(
          review.user.telegramId,
          `‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!`,
          { parse_mode: 'Markdown' }
        );
      } catch (notifyError) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞:', notifyError);
      }
      
      await ctx.answerCbQuery('–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:', err);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞');
    }
  });

  bot.action(/^reject_review_(.+)$/, async (ctx) => {
    if (!ctx.session.isAdmin) {
      await ctx.answerCbQuery('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
      return;
    }
    
    const reviewId = ctx.match[1];
    
    try {
      const review = await Review.findById(reviewId);
      
      if (!review) {
        await ctx.answerCbQuery('–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      // –£–¥–∞–ª—è–µ–º –æ—Ç–∑—ã–≤
      await Review.deleteOne({ _id: reviewId });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.editMessageText(
        `‚ùå *–û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω*\n\n` +
        `‚≠ê –û—Ü–µ–Ω–∫–∞: ${review.rating}/5\n` +
        `üë§ –ö–ª–∏–µ–Ω—Ç: ${review.user.name}\n` +
        `üìù –¢–µ–∫—Å—Ç: ${review.text}`,
        { parse_mode: 'Markdown' }
      );
      
      await ctx.answerCbQuery('–û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:', err);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞
  bot.action(/^rating_(\d)$/, (ctx) => {
    const rating = parseInt(ctx.match[1]);
    
    if (rating >= 1 && rating <= 5) {
      ctx.session.reviewRating = rating;
      ctx.scene.enter('review-text-scene');
      ctx.answerCbQuery(`–í—ã–±—Ä–∞–Ω–∞ –æ—Ü–µ–Ω–∫–∞: ${rating} ‚≠ê`);
    } else {
      ctx.answerCbQuery('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5');
    }
  });
};

module.exports = { setupCallbacks }; 