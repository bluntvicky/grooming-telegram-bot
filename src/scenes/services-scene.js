const { Scenes } = require('telegraf');
const Service = require('../models/service');
const { servicesKeyboard, mainMenu } = require('../utils/keyboards');

// –°—Ü–µ–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å–ª—É–≥ –∏ —Ü–µ–Ω
const servicesScene = new Scenes.BaseScene('services-scene');

servicesScene.enter(async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏
    const services = await Service.find({ available: true })
      .sort({ price: 1 });
    
    if (services.length === 0) {
      await ctx.reply(
        'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        mainMenu()
      );
      return ctx.scene.leave();
    }
    
    await ctx.reply(
      'üê∂ *–ù–∞—à–∏ —É—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã*\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ:',
      {
        parse_mode: 'Markdown',
        ...servicesKeyboard(services)
      }
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Å–ª—É–≥:', err);
    await ctx.reply(
      'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Å–ª—É–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      mainMenu()
    );
    return ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
servicesScene.action('back_to_main', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainMenu());
  return ctx.scene.leave();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ
servicesScene.action(/^service_(.+)$/, async (ctx) => {
  const serviceId = ctx.match[1];
  
  try {
    const service = await Service.findById(serviceId);
    
    if (!service) {
      await ctx.answerCbQuery('–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å–ª—É–≥–µ
    let message = `*${service.name}*\n\n`;
    message += `${service.description}\n\n`;
    message += `üí∞ *–¶–µ–Ω–∞:* ${service.price}‚ÇΩ\n`;
    message += `‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${service.duration} –º–∏–Ω.\n\n`;
    
    if (service.imageUrl) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
      await ctx.replyWithPhoto(
        service.imageUrl,
        {
          caption: message,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç—É —É—Å–ª—É–≥—É', callback_data: `book_service_${service._id}` }],
              [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥', callback_data: 'back_to_services' }]
            ]
          }
        }
      );
    } else {
      // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
      await ctx.reply(
        message,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç—É —É—Å–ª—É–≥—É', callback_data: `book_service_${service._id}` }],
              [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥', callback_data: 'back_to_services' }]
            ]
          }
        }
      );
    }
    
    await ctx.answerCbQuery();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ:', err);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ');
  }
});

// –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥
servicesScene.action('back_to_services', async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏
    const services = await Service.find({ available: true })
      .sort({ price: 1 });
    
    await ctx.editMessageText(
      'üê∂ *–ù–∞—à–∏ —É—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã*\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ:',
      {
        parse_mode: 'Markdown',
        reply_markup: servicesKeyboard(services).reply_markup
      }
    );
    
    await ctx.answerCbQuery();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥:', err);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥');
  }
});

// –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —É—Å–ª—É–≥—É
servicesScene.action(/^book_service_(.+)$/, async (ctx) => {
  const serviceId = ctx.match[1];
  
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª—É–≥—É –≤ –∫–æ—Ä–∑–∏–Ω—É
    if (!ctx.session.cart) {
      ctx.session.cart = { services: [] };
    }
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
    ctx.session.cart.services = [serviceId];
    
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ü–µ–Ω—É –∑–∞–ø–∏—Å–∏
    await ctx.answerCbQuery('–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∑–∞–ø–∏—Å—å');
    ctx.scene.enter('booking-scene');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏ –≤ –∑–∞–ø–∏—Å—å:', err);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ö–æ–¥–∞ —Å–æ —Å—Ü–µ–Ω—ã
servicesScene.leave((ctx) => {
  return ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ —É—Å–ª—É–≥', mainMenu());
});

module.exports = { servicesScene }; 