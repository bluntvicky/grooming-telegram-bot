const { Scenes } = require('telegraf');
const TimeSlot = require('../models/timeSlot');
const { dateSelectKeyboard, timeSlotKeyboard, mainMenu } = require('../utils/keyboards');
const { getNextDays, getStartOfDay, getEndOfDay } = require('../utils/dateHelpers');

// –°—Ü–µ–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
const timeSlotsScene = new Scenes.BaseScene('timeslots-scene');

// –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
timeSlotsScene.enter(async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π
    const dates = getNextDays(14);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
    const availableDates = [];
    
    for (const date of dates) {
      const startOfDay = getStartOfDay(date.date);
      const endOfDay = getEndOfDay(date.date);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
      const hasAvailableSlots = await TimeSlot.exists({
        startTime: { $gte: startOfDay, $lte: endOfDay },
        isBooked: false
      });
      
      if (hasAvailableSlots) {
        availableDates.push(date);
      }
    }
    
    if (availableDates.length === 0) {
      await ctx.reply(
        'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.',
        mainMenu()
      );
      return ctx.scene.leave();
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
    await ctx.reply(
      'üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:*',
      {
        parse_mode: 'Markdown',
        ...dateSelectKeyboard(availableDates)
      }
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç:', err);
    await ctx.reply(
      'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      mainMenu()
    );
    return ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
timeSlotsScene.action('back_to_main', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainMenu());
  return ctx.scene.leave();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
timeSlotsScene.action(/^date_(.+)$/, async (ctx) => {
  const dateValue = ctx.match[1]; // YYYY-MM-DD
  ctx.session.selectedDate = dateValue;
  
  try {
    const startOfDay = getStartOfDay(dateValue);
    const endOfDay = getEndOfDay(dateValue);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    const availableSlots = await TimeSlot.find({
      startTime: { $gte: startOfDay, $lte: endOfDay },
      isBooked: false
    }).sort({ startTime: 1 });
    
    if (availableSlots.length === 0) {
      await ctx.answerCbQuery('–ù–∞ —ç—Ç—É –¥–∞—Ç—É –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π');
      return;
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const date = new Date(dateValue);
    const formattedDate = date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
    await ctx.editMessageText(
      `üïì *–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ ${formattedDate}:*\n\n` +
      '–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:',
      {
        parse_mode: 'Markdown',
        ...timeSlotKeyboard(availableSlots)
      }
    );
    
    await ctx.answerCbQuery();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏:', err);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
timeSlotsScene.action('back_to_dates', async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π
    const dates = getNextDays(14);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
    const availableDates = [];
    
    for (const date of dates) {
      const startOfDay = getStartOfDay(date.date);
      const endOfDay = getEndOfDay(date.date);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
      const hasAvailableSlots = await TimeSlot.exists({
        startTime: { $gte: startOfDay, $lte: endOfDay },
        isBooked: false
      });
      
      if (hasAvailableSlots) {
        availableDates.push(date);
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
    await ctx.editMessageText(
      'üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:*',
      {
        parse_mode: 'Markdown',
        ...dateSelectKeyboard(availableDates)
      }
    );
    
    await ctx.answerCbQuery();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã:', err);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
timeSlotsScene.action(/^slot_(.+)$/, async (ctx) => {
  const slotId = ctx.match[1];
  
  try {
    const slot = await TimeSlot.findById(slotId);
    
    if (!slot) {
      await ctx.answerCbQuery('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    if (slot.isBooked) {
      await ctx.answerCbQuery('–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.');
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.selectedTimeSlot = slotId;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const date = new Date(slot.startTime);
    await ctx.answerCbQuery(`–í—ã –≤—ã–±—Ä–∞–ª–∏ ${date.toLocaleDateString('ru-RU')} –≤ ${date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏—é –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è
    await ctx.reply(
      `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ ${date.toLocaleDateString('ru-RU')} –≤ ${date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}\n\n` +
      '–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è?',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'book_selected_time' }],
            [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_dates' }]
          ]
        }
      }
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏:', err);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
timeSlotsScene.action('book_selected_time', async (ctx) => {
  try {
    if (!ctx.session.selectedTimeSlot) {
      await ctx.answerCbQuery('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è');
      return;
    }
    
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ü–µ–Ω—É –∑–∞–ø–∏—Å–∏
    await ctx.answerCbQuery();
    ctx.scene.enter('booking-scene');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –∑–∞–ø–∏—Å–∏:', err);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ö–æ–¥–∞ —Å–æ —Å—Ü–µ–Ω—ã
timeSlotsScene.leave((ctx) => {
  return ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏', mainMenu());
});

module.exports = { timeSlotsScene }; 